// ограничения type - не могут наследоваться

// ==========
// ИНТЕРФЕЙСЫ
// ==========
//     В интерфейсы мо описываем обязательные и не обяательные поля, которые после этого передаем как типы
// интерфейс может регулировать класс с помощью ключевого слова implements
// класс может имплементироваться от нескольких интерфейсов сразу

// =================
// РАБОТА С КЛАССАМИ
// =================

// ===== // Модификаторы доступа
// public - свойство класса доступно из любого места программы. В TS модификатор `public` назначается всем свойствам по умолчанию
// private - свойство класса доступно только внутри класса.
// protected - свойство класса доступно внутри класса и его наследников.
// readonly - свойство класса доступно только для чтения. Важная особенность: readonly свойство должно быть реализовано при объявлении или в конструкторе.
// static - свойство/метод, к которому можно обратиться не создавая экземпляр класса.

class My1stClass {
    public property2: string = `This property is public`;
    private property1: string = `This property is private`;
    protected property3: string = `This property is protected`;
    readonly property4: string = `This property is readonly`;
    static property5: string = `This property is static`;
}

// ===== // Абстрактные классы и методы
// Абстрактные классы — это базовые классы, от которых наследуются другие.
// Объявляются с помощью ключевого слова 'abstract'
abstract class My2ndClass {
    abstract name: string;

    sayHi(): void {
        console.log("Hi!");
    }

    abstract doSomeRock(): void;
}

// Экземпляры абстрактных классов не могут быть созданы напрямую (нельзя использовать new).

// Абстрактные классы чаще всего используются для описания обязательных частей функционала наследников,
// детали реализации которых неизвестны на момент создания класса.
// Пример: абстрактный класс 'My2ndClass' сожержит свойство 'name', поскольку мы точно знаем, что оно должно присутствовать в наследниках.

// Класс 'My2ndClass' содержит абстрактный метод 'doSomeRock'.
// Абстрактный метод это метод класса, описание реализации которого происходит в наследниках класса.
// Абстрактные методы можно создавать только внутри абстрактных классов.

// В отличие от интерфейса, абстрактный класс может содержать детали реализации своих наследников (например метод 'sayHi').

// Использование классов в качестве типов.
class My3rdClass {
    property1: string = 'This is 1st property';
}

let sample1: My3rdClass; // Теперь в переменную 'sample1' можно записывать только сущности, структура которых идентична 'My3rdClass'.